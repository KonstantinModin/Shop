{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/index.js","components/Order/CheckoutSummary/index.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/ContactData/index.js","containers/Checkout/Checkout.js","containers/Checkout/index.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["Input","_ref","elementConfig","elementType","value","label","changed","invalid","shouldValidate","touched","inputElement","clss","push","react_default","a","createElement","Object","assign","className","join","_templateObject","onChange","_templateObject2","_templateObject3","options","map","i","key","_templateObject4","CheckoutSummary","props","Burger","ingredients","price","toFixed","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","postalCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","e","preventDefault","_this$props","_this","userId","onOrderBurger","token","date","Date","customerData","entries","_ref2","slicedToArray","b","concat","inputChangedHandler","_ref3","target","updatedOrderForm","objectSpread","updatedFormElement","checkValidity","setState","_","prevState","this","every","purchased","history","replace","_this2","console","log","form","Fragment","_ref4","_ref5","event","enabled","loading","Spinner","Component","connect","builder","totalPrice","order","auth","dispatch","data","purchaseBurger","withErrorHandler","server","path","match","useEffect","summary","react_router","to","Order_CheckoutSummary","goBack","component","Checkout","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/3.8ad63ad1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = ({elementConfig, elementType, value, label, changed, invalid, shouldValidate, touched}) => {\r\n    let inputElement = null;\r\n    let clss = ['InputElement'];\r\n    if (invalid && shouldValidate && touched) clss.push('Invalid');\r\n\r\n    switch (elementType) {\r\n        case ( 'input'): \r\n            inputElement = <input className={clss.join` `} {...elementConfig} value={value} onChange={changed} />;\r\n            break;\r\n        case ( 'textarea'): \r\n            inputElement = <textarea className={clss.join` `} {...elementConfig} value={value} onChange={changed} />;\r\n            break;\r\n        case ( 'select'): \r\n            inputElement = (\r\n                <select className={clss.join` `} value={value} onChange={changed}>\r\n                    {elementConfig.options.map((i) => (\r\n                        <option key={i} value={i}>{i}</option>\r\n                    ))}\r\n                </select>);\r\n            break;\r\n        default: \r\n            inputElement = <input className={clss.join` `} {...elementConfig} value={value} onChange={changed} />;        \r\n    }\r\n\r\n    return (\r\n        <div className=\"InputField\">\r\n            <label>{label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","import Input from './Input';\r\n\r\nexport default Input;","import CheckoutSummary from './CheckoutSummary';\r\n\r\nexport default CheckoutSummary;","import React from 'react';\r\nimport './CheckoutSummary.css';\r\nimport Burger from '../../Burger';\r\nimport Button from '../../UI/Button';\r\n\r\nconst CheckoutSummary = (props) => {\r\n    return (\r\n        <div className=\"CheckoutSummary\">\r\n            <h1>We hope it tastes well!</h1>\r\n            <div className=\"Burger\">\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <h2>The total price of your order is: {props.price.toFixed(2)}$</h2>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>Cancel</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>Continue</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutSummary;\r\n","import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button';\r\nimport Spinner from '../../../components/UI/Spinner';\r\nimport server from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input';\r\nimport { connect } from 'react-redux';\r\nimport { purchaseBurger } from '../../../store/actions';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler';\r\nimport { checkValidity } from '../../../store/utility';\r\nimport './ContactData.css';\r\n\r\nclass ContactData extends Component {  \r\n    state = {\r\n        orderForm: {   \r\n            name: {\r\n                elementType: 'input',\r\n                label: 'Your name:',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                label: 'Your street:',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter Your Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            postalCode: {\r\n                elementType: 'input',\r\n                label: 'Your postal code:',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'Enter Your Postal Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 6\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                label: 'Your country:',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter Your Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: true,\r\n                shouldValidate: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                label: 'Your e-mail:',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Enter Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },       \r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                label: 'Delivery method:',\r\n                elementConfig: {\r\n                    options: ['Pigeons', 'Horses', 'Rats', 'Mice', 'Ants']\r\n                },\r\n                value: 'Pigeons',\r\n                shouldValidate: false,\r\n                touched: false,\r\n                valid: true\r\n            },\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        const {userId, ingredients, price, onOrderBurger, token} = this.props;\r\n        \r\n        const order = {\r\n            userId: userId,\r\n            ingredients: ingredients,\r\n            price: price,\r\n            date: new Date(),\r\n            customerData: Object.entries(this.state.orderForm).map(([a, b])=> `${a}: ${b.value}`)\r\n            // deliveryMethod: 'pigeons'\r\n        };\r\n        onOrderBurger(order, token);        \r\n    }\r\n\r\n    // checkValidity({validation, value, shouldValidate}) {\r\n    //     if (!shouldValidate) return true;\r\n    //     let isValid = true;\r\n    //     if (validation.required) {\r\n    //         isValid = value.trim() !== '' && isValid;\r\n    //     }\r\n\r\n    //     if (validation.minLength) {\r\n    //         isValid = value.length >= validation.minLength && isValid;\r\n    //     }\r\n    //     if (validation.maxLength) {\r\n    //         isValid = value.length <= validation.maxLength && isValid;\r\n    //     }\r\n    //     return isValid;\r\n    // };\r\n\r\n    inputChangedHandler = ({target: {value}}, name) => {   \r\n        const updatedOrderForm = { ...this.state.orderForm};\r\n        const updatedFormElement = { ...updatedOrderForm[name]};\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = checkValidity(updatedFormElement);\r\n        updatedOrderForm[name] = updatedFormElement;\r\n        \r\n        this.setState({orderForm: updatedOrderForm});              \r\n    };\r\n    \r\n    componentDidUpdate(_, prevState){\r\n        const formIsValid = Object.entries(this.state.orderForm).every(i => i[1].valid);        \r\n        if (formIsValid !== prevState.formIsValid) {\r\n            this.setState({formIsValid: formIsValid});\r\n        };\r\n\r\n        if (this.props.purchased) this.props.history.replace('/');\r\n    };\r\n\r\n    render() {\r\n        console.log('Contact data render()');\r\n        let form = (\r\n            <>\r\n                <h2>Enter your Contact Data</h2>\r\n                <form>\r\n                    {Object.entries(this.state.orderForm).map(([a, b]) => (\r\n                        <Input\r\n                            key={a}                                 \r\n                            elementType={b.elementType}\r\n                            elementConfig={b.elementConfig}\r\n                            value={b.value}\r\n                            label={b.label}\r\n                            invalid={!b.valid}\r\n                            shouldValidate={b.shouldValidate}\r\n                            touched={b.touched}\r\n                            changed={(event) => this.inputChangedHandler(event, a)} />                        \r\n                    ))}                    \r\n                    <div className=\"ButtonDiv\">\r\n                        <Button enabled={this.state.formIsValid} btnType=\"Success\" clicked={this.orderHandler}>Order</Button>\r\n                    </div>\r\n                </form>\r\n            </>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className=\"ContactData\">\r\n                {form}                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.builder.ingredients,\r\n        price: state.builder.totalPrice,\r\n        loading: state.order.loading,\r\n        purchased: state.order.purchased,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (data, token) => dispatch(purchaseBurger(data, token))        \r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, server));\r\n","import ContactData from './ContactData';\r\n\r\nexport default ContactData;","import React, { useEffect } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary';\r\nimport ContactData from './ContactData';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport './Checkout.css';\r\n\r\nconst Checkout = (props) => {    \r\n    const { ingredients, price, match: {path}} = props;\r\n    \r\n    const checkoutCancelledHandler = () => {\r\n        props.history.goBack();\r\n    }\r\n\r\n    const checkoutContinuedHandler = () => {\r\n        // props.history.replace('/checkout/contact-data', [ingredients, price]);\r\n        props.history.replace('/checkout/contact-data');\r\n    } \r\n\r\n    useEffect(() => {\r\n        console.log('ingredients in checkout from Redux :', ingredients);        \r\n    });\r\n\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (props.ingredients) {\r\n        summary = (\r\n            <div className=\"Checkout\">\r\n                <CheckoutSummary  \r\n                    ingredients={ingredients}\r\n                    price={price}\r\n                    checkoutContinued={checkoutContinuedHandler}\r\n                    checkoutCancelled={checkoutCancelledHandler} />\r\n                <Route path={path + '/contact-data'} component={ContactData} />\r\n            </div>\r\n        )\r\n    }\r\n    return summary\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.builder.ingredients,\r\n        price: state.builder.totalPrice\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import Checkout from './Checkout';\r\n\r\nexport default Checkout;","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}"],"sourceRoot":""}