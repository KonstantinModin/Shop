{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/index.js","containers/Auth/Auth.js","containers/Auth/index.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["Input","_ref","elementConfig","elementType","value","label","changed","invalid","shouldValidate","touched","inputElement","clss","push","react_default","a","createElement","Object","assign","className","join","_templateObject","onChange","_templateObject2","_templateObject3","options","map","i","key","_templateObject4","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","formIsValid","isSignup","inputChangedHandler","event","controlName","updatedControls","objectSpread","_this","updatedItem","target","checkValidity","setState","submitHandler","preventDefault","_this$state","_this$state$controls","props","onAuth","switchAuthModeHandler","_","prevState","entries","this","every","isAuth","history","authRedirectPath","building","onSetAuthRedirectPath","_this2","form","onSubmit","_ref2","slicedToArray","b","Button","enabled","btnType","clicked","loading","Spinner","errorMessage","error","message","split","toString","Component","withRouter","connect","auth","token","builder","dispatch","setAuthRedirectPath","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/4.9fd846d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = ({elementConfig, elementType, value, label, changed, invalid, shouldValidate, touched}) => {\r\n    let inputElement = null;\r\n    let clss = ['InputElement'];\r\n    if (invalid && shouldValidate && touched) clss.push('Invalid');\r\n\r\n    switch (elementType) {\r\n        case ( 'input'): \r\n            inputElement = <input className={clss.join` `} {...elementConfig} value={value} onChange={changed} />;\r\n            break;\r\n        case ( 'textarea'): \r\n            inputElement = <textarea className={clss.join` `} {...elementConfig} value={value} onChange={changed} />;\r\n            break;\r\n        case ( 'select'): \r\n            inputElement = (\r\n                <select className={clss.join` `} value={value} onChange={changed}>\r\n                    {elementConfig.options.map((i) => (\r\n                        <option key={i} value={i}>{i}</option>\r\n                    ))}\r\n                </select>);\r\n            break;\r\n        default: \r\n            inputElement = <input className={clss.join` `} {...elementConfig} value={value} onChange={changed} />;        \r\n    }\r\n\r\n    return (\r\n        <div className=\"InputField\">\r\n            <label>{label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","import Input from './Input';\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../components/UI/Input';\r\nimport Button from '../../components/UI/Button';\r\nimport Spinner from '../../components/UI/Spinner';\r\nimport { auth, setAuthRedirectPath } from '../../store/actions';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport { checkValidity } from '../../store/utility';\r\nimport './Auth.css';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                label: 'Your e-mail:',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Enter Your e-mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                label: 'Your password:',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Enter Your password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        isSignup: true\r\n    }\r\n\r\n    // checkValidity({validation, value, shouldValidate}) {        \r\n    //     if (!shouldValidate) return true;\r\n    //     let isValid = true;\r\n    //     if (validation.required) {\r\n    //         isValid = value.trim() !== '' && isValid;            \r\n    //     }\r\n        \r\n    //     if (validation.minLength) {\r\n    //         isValid = value.length >= validation.minLength && isValid;            \r\n    //     }\r\n    //     if (validation.maxLength) {\r\n    //         isValid = value.length <= validation.maxLength && isValid;            \r\n    //     }\r\n        \r\n    //     if (validation.isEmail) {\r\n    //         const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n    //         isValid = pattern.test(value) && isValid;           \r\n    //     }\r\n    //     return isValid;\r\n    // }\r\n\r\n    inputChangedHandler = (event, controlName) => {       \r\n        const updatedControls = {...this.state.controls};\r\n        const updatedItem = {...updatedControls[controlName]};\r\n        updatedItem.value = event.target.value;\r\n        updatedItem.valid = checkValidity(updatedItem);\r\n        updatedItem.touched = true;        \r\n        updatedControls[controlName] = updatedItem;\r\n        this.setState({controls: updatedControls});\r\n    };\r\n\r\n    componentDidUpdate(_, prevState){\r\n        const formIsValid = Object.entries(this.state.controls).every(i => i[1].valid);        \r\n        if (formIsValid !== prevState.formIsValid) {\r\n            this.setState({formIsValid: formIsValid});\r\n        };\r\n       \r\n\r\n        if (this.props.isAuth) {\r\n            this.props.history.push(this.props.authRedirectPath);\r\n        };\r\n    };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        const {isSignup, controls: {email, password }} = this.state;\r\n        this.props.onAuth(email.value, password.value, isSignup);\r\n    };\r\n\r\n    switchAuthModeHandler = (event) => {\r\n        event.preventDefault();\r\n        this.setState(state => {\r\n            return {isSignup: !state.isSignup}\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (!this.props.building) {\r\n            this.props.onSetAuthRedirectPath(this.props.authRedirectPath);\r\n        };\r\n    };\r\n    \r\n    render() {\r\n        let form = (\r\n            <form onSubmit={this.submitHandler}>\r\n                    {Object.entries(this.state.controls).map(([a, b]) => (\r\n                            <Input\r\n                                key={a}                                 \r\n                                elementType={b.elementType}\r\n                                elementConfig={b.elementConfig}\r\n                                value={b.value}\r\n                                label={b.label}\r\n                                invalid={!b.valid}\r\n                                shouldValidate={b.shouldValidate}\r\n                                touched={b.touched}\r\n                                changed={(event) => this.inputChangedHandler(event, a)} />                        \r\n                        ))}                    \r\n                        <div className=\"ButtonDiv\">\r\n                            <Button enabled={this.state.formIsValid} btnType=\"Success\">Submit</Button>\r\n                            <Button \r\n                                btnType=\"Danger\" \r\n                                clicked={this.switchAuthModeHandler}\r\n                                >SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n                        </div>\r\n                </form>\r\n        )\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = <h2>{this.props.error.message.split`_`.join` `}</h2>\r\n        }\r\n\r\n        // let authRedirect = this.props.isAuth ? <Redirect to={this.props.authRedirectPath} /> : null;\r\n        // console.log('this.props.isAuth', this.props.isAuth);\r\n        // console.log('authRedirect', authRedirect);\r\n        // console.log('this.props.authRedirectPath :', this.props.authRedirectPath);\r\n        return (\r\n            <div className=\"Auth\">\r\n                {/* {authRedirect} */}\r\n                <h2>{this.state.isSignup.toString()}</h2>\r\n                {errorMessage}\r\n                {form}\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuth: state.auth.token !== null,\r\n        building: state.builder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Auth));","import Auth from './Auth';\r\n\r\nexport default Auth;","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}"],"sourceRoot":""}